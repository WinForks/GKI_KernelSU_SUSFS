name: GKI Kernel Build
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      revision:
        required: false
        type: string
      use_zram:
        required: true
        type: boolean
        default: true
      use_bbg:
        required: true
        type: boolean
        default: true
      use_kpm:
        required: true
        type: boolean
        default: true
      lxc_enable:
        required: true
        type: boolean
        default: false
      schedhorizon_enable:
        required: true
        type: boolean
        default: false
      only_ak3:
        required: true
        type: boolean
        default: false

jobs:
  build-kernel-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true" # Frees ~2 GB
          remove-android: "true" # Frees ~9 GB
          remove-haskell: "true" # Frees ~5.2 GB
          remove-codeql: "true" # Frees ~5.4 GB
          remove-docker-images: "true" # Frees ~3.2 GB
          remove-large-packages: "true" # Frees ~3.1 GB
          remove-swapfile: "true" # Frees ~4 GB
          remove-cached-tools: "false" # Avoid unless confirmed safe
          verbose: "true" # Enable detailed logging

      - name: 设定 CONFIG 环境变量
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      # Install ccache
      - name: 安装 ccache
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-

      - name: 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
          key: toolchain-${{ runner.os }}-v1

      # Step 2: Download toolchain if cache was not found
      - name: 下载工具链（如果未找到缓存）
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

      - name: 设置环境变量
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: 密钥设置——已经过mkppk修改
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

      - name: 安装仓库
        run: |
          # Install dependencies
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: 克隆 AnyKernel3 和其他依赖项
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."

          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/Tools-cx-app/kernel_patches.git

          # SukiSU的补丁仓库
          git clone https://github.com/ShirkNeko/SukiSU_patch.git

          # zzh20188的补丁仓库
          git clone https://github.com/zzh20188/GKI_KernelSU_SUSFS.git zzh_patch

      - name: 设置 CONFIG 环境变量
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      - name: 初始化和同步内核源代码
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"

          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          # Check if branch is deprecated
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          # Sync repo and apply patches
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast
          echo "REMOTE_BRANCH=$REMOTE_BRANCH" >> $GITHUB_ENV

          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          if grep -q deprecated <<< "$REMOTE_BRANCH" && \
             { [ "$FORMATTED_BRANCH" == "android13-5.15" ] && \
               [ ${{ inputs.sub_level }} -lt 123 ]; }; then
            echo '修复5.15仅支持旧版C库的BUG'
            cd ./common
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/legacy/fix_5.15.legacy -o fix_5.15.legacy.patch
            patch -p1 < fix_5.15.legacy.patch
          fi

      - name: Apply ptrace patch for older kernels
        run: |
          cd "$CONFIG/common"
          patch -p1 -F 3 < "../../kernel_patches/gki_ptrace.patch"

      - name: 添加 SukiSU
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG" || { echo "无法切换到目录: $CONFIG" >&2; exit 1; }

          echo "添加 SukiSU..."
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main

      - name: 添加 Baseband-guard 支持
        if: ${{ github.event.inputs.use_bbg == 'true' }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"

          echo "下载并运行 Baseband-guard setup 脚本..."
          wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash

          echo "启用 Baseband-guard 内核配置..."
          CONFIG_FILE="arch/arm64/configs/gki_defconfig"
          echo "CONFIG_BBG=y" >> "$CONFIG_FILE"

          # 对于 GitHub Actions 云编译，修改 LSM Kconfig
          echo "修改 security/Kconfig 以包含 baseband_guard..."
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' ./security/Kconfig

          echo "Baseband-guard 配置完成"

      - name: 为 KernelSU 变体安装 SUSFS 补丁
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"

          echo "Applying SUSFS patches..."

          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          echo "Applying SUSFS patches for SukiSU..."
          cd ./KernelSU
          echo "Applying SukiSU specific SUSFS patch..."

          cd ../common
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          if grep -q deprecated <<< "$REMOTE_BRANCH" && \
             { [ "$FORMATTED_BRANCH" == "android12-5.10" ] && \
               [ ${{ inputs.sub_level }} -lt 136 ]; }; then
            patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/legacy/fdinfo.c.patch -o fdinfo.c.patch
            patch -p1 < fdinfo.c.patch
          else
            patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
          fi

      - name: 添加schedhorizon调速器
        run: |
          if [[ "${{ github.event.inputs.schedhorizon_enable }}" == "true" ]]; then
            echo "更改为配置目录: $CONFIG..."
            cd "$CONFIG/common"
            echo "下载相关文件"
            curl -LSs https://raw.githubusercontent.com/Tools-cx-app/ztc_build_action/main/patches/schedhorizon/cpufreq_schedhorizon.c -o kernel/sched/cpufreq_schedhorizon.c
            #curl -LSs https://raw.githubusercontent.com/Tools-cx-app/esk_build_action/main/patches/schedhorizon/sched.h -o kernel/sched/sched.h
            echo "写入补丁"
            echo "obj-\$(CONFIG_CPU_FREQ_GOV_SCHEDHORIZON) += cpufreq_schedhorizon.o" >> kernel/sched/Makefile
          fi

      - name: 添加lxc
        run: |
          if [[ "${{ github.event.inputs.better_net }}" == "true" ]]; then
            echo "更改为配置目录: $CONFIG..."
            cd "$CONFIG/common"
            echo "下载相关文件"
            curl -LSs https://raw.githubusercontent.com/Tools-cx-app/ztc_build_action/main/patches/lxc/lxc_support.patch -o lxc.patch
            echo "开始patch"
            if [ -e "drivers/gpu/mediatek/mali-valhall/gpu/arm/midgard/context/mali_kbase_context.c" ]; then
              patch -p1 --forward --fuzz=3 < lxc.patch
            else
              sed -i '/^diff --git.*mali_kbase_context\.c$/,/^diff --git/{
                /^diff --git/!d
              }' lxc.patch
              patch -p1 --forward --fuzz=3 < lxc.patch
            fi
          fi

      - name: 一些修复补丁
        run: |
          cd "$CONFIG/common"
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          # Fake Patch to fix failures
          fake_patched=0
          if [ "$FORMATTED_BRANCH" = "android15-6.6" ]; then
            if ! grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
              echo "未找到 nr_subpages,正在进行补丁修复"
              sed -i -e '/int ret = 0, copied = 0;/a \\tunsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;' -e '/int ret = 0, copied = 0;/a \\tpagemap_entry_t \*res = NULL;' ./fs/proc/task_mmu.c
              fake_patched=1
            fi
          fi

          if [ "$FORMATTED_BRANCH" = "android12-5.10" ] || [ "$FORMATTED_BRANCH" = "android13-5.10" ] || [ "$FORMATTED_BRANCH" = "android13-5.15" ]; then
            if ! grep -qxF $'\tif (!vma_pages(vma))' ./fs/proc/task_mmu.c; then
              echo "未找到 vma_pages,正在进行补丁修复"
              fake_patched=1
            fi
          fi

          if [ "$fake_patched" = 1 ]; then
            if [ "$FORMATTED_BRANCH" = "android15-6.6" ]; then
              if grep -qxF $'\tunsigned int nr_subpages = __PAGE_SIZE / PAGE_SIZE;' ./fs/proc/task_mmu.c; then
                sed -i -e '/unsigned int nr_subpages \= __PAGE_SIZE \/ PAGE_SIZE;/d' -e '/pagemap_entry_t \*res = NULL;/d' ./fs/proc/task_mmu.c
              fi
            fi

            if [ "$FORMATTED_BRANCH" = "android12-5.10" ] || [ "$FORMATTED_BRANCH" = "android13-5.10" ] || [ "$FORMATTED_BRANCH" = "android13-5.15" ]; then
              if grep -qxF $'\t\tgoto show_pad;' ./fs/proc/task_mmu.c; then
                sed -i -e 's/goto show_pad;/return 0;/' ./fs/proc/task_mmu.c
              fi
            fi
          fi

      - name: 应用新的HOOKS补丁
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"

          echo "Applying hooks for SukiSU..."
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch

      - name: 应用隐藏某特征的补丁
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"
          # Apply additional patch
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: 升级LZ4至1.10.0
        if: ${{ inputs.use_zram }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"
          echo 'lz升级'
          # 删除lz4库旧有文件
          files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
          )

          for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                  rm "$file"
                  echo "$file 已删除"
              else
                  echo "$file 不存在"
              fi
          done

          cp -r ../../zzh_patch/zram/lz4/* ./lib/lz4/
          cp -r ../../zzh_patch/zram/include/linux/* ./include/linux/
          cp -r ../../zzh_patch/zram/${{ inputs.kernel_version }}/lz4_1.10.0.patch ./

          patch -p1 -F 3 --fuzz=5 < lz4_1.10.0.patch || true

          # 检查文件是否存在
          if [ -f "fs/f2fs/Makefile" ]; then
              # 检查是否包含指定行
              if ! grep -qF "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" "fs/f2fs/Makefile"; then
                  echo "f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o" >> "fs/f2fs/Makefile"
                  echo "已添加: f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o"
              else
                  echo "文件已经包含: f2fs-\$(CONFIG_F2FS_IOSTAT) += iostat.o"
              fi
          else
              echo "文件不存在: fs/f2fs/Makefile"
          fi

      - name: 复制源文件 & 应用LZ4KD & ZSTDN补丁
        if: ${{ inputs.use_zram }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG/common"
          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./lib/

          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./
          echo "正在打lz4kd补丁"
          patch -p1 -F 3 < lz4kd.patch || true
          echo '完成LZ4KD补丁'

          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4k_oplus.patch ./
          echo "正在打lz4k_oplus补丁"
          patch -p1 -F 3 < lz4k_oplus.patch || true
          echo '完成lz4k_oplus补丁'

      - name: 修复三星 6.6 GKI设备上的Wi-Fi和蓝牙功能
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          echo "[+] 将三星KDP导出的符号添加到 abi_gki_aarch64_galaxy"
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          echo "[+] 将三星KDP导出的符号定义添加到 abi_gki_aarch64.stg"
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            echo "[+] 成功将三星KDP导出符号定义添加到 abi_gki_aarch64.stg"
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          echo "[+] 添加三星最小化KDP驱动程序"
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: LZ4KD & Lz4k_oplus配置
        if: ${{ inputs.use_zram }}
        run: |
          set -x
          set -e
          echo "写入LZ4KD&ZSTDN config依赖"
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"

          if [ "${{ inputs.kernel_version }}" = "5.10" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
            echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
          fi

          if [ "${{ inputs.kernel_version }}" != "6.6" ] && [ "${{ inputs.kernel_version }}" != "5.10" ]; then
            # sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' "$CONFIG_FILE"
            if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
                echo "提示：文件 $CONFIG_FILE 包含字符串 CONFIG_ZSMALLOC。"
                sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
            else
                echo "警告：文件 $CONFIG_FILE 不包含字符串 CONFIG_ZSMALLOC。"
                echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            fi

            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          fi

          if [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          fi

          if [ "${{ inputs.android_version }}" = "android14" ] || [ "${{ inputs.android_version }}" = "android15" ]; then
            sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "$CONFIG/common/modules.bzl"
            echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
            echo 'Android14_Bazel:已修复zram&zsmalloc'
          fi

          if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
          fi

      - name: 添加SUSFS配置设置
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"
          echo "Adding configuration settings to gki_defconfig..."
          defconfig="./common/arch/arm64/configs/gki_defconfig"

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> "$defconfig"

          echo "CONFIG_KPM=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$defconfig"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$defconfig"

          # Mountify Support
          echo "CONFIG_TMPFS_XATTR=y" >> "$defconfig"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$defconfig"

          # Networking Configuration
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_NAT=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> "$defconfig"

          #启用  BPF 流解析器,实现高性能网络流量处理,增强网络监控和分析能力
          echo "CONFIG_BPF_STREAM_PARSER=y" >> "$defconfig"

          #开启增强 Netfilter 防火墙扩展模块,支持基于地址类型的匹配规则,启用 IP 集合支持,提高防火墙规则灵活性,支持更复杂的流量过滤策略
          echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> "$defconfig"
          echo "CONFIG_NETFILTER_XT_SET=y" >> "$defconfig"

          # TCP Congestion Control
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$defconfig"
          echo "CONFIG_NET_SCH_FQ=y" >> "$defconfig"
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_CUBIC=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_RENO=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_BIC=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_WESTWOOD=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_HTCP=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_VEGAS=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_NV=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_BRUTAL=y" >> "$defconfig"

          # IPSet support
          echo "CONFIG_IP_SET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_MAX=65534" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPMARK=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPMAC=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_MAC=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "$defconfig"
          echo "CONFIG_IP_SET_LIST_SET=y" >> "$defconfig"

          # SUSFS Configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$defconfig"

          if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$defconfig"
          else
            echo "CONFIG_KSU_SUSFS_SUS_PATH=n" >> "$defconfig"
          fi

          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$defconfig"
          #echo "CONFIG_KSU_SUSFS_SUS_MAP=y" >> "$defconfig"

          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$defconfig"

          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$defconfig"

          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$defconfig"

          # 开启O3编译优化配置
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y" >> "$defconfig"

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: 配置内核名称
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd "$CONFIG"

          sed -i '$s|echo "\$res"|echo "\$res"|' ./common/scripts/setlocalversion

          # 如果你需要改构建时间,请把以下变量 CURRENT_TIME 修改为如下例子字符串,如:CURRENT_TIME="Sat Jun 07 06:29:29 UTC 2025"
          # 该字符串表示 UTC时间: 2025年6月7日 06:29:29,"Sat" 是星期六的缩写，而 "Jun" 是六月的缩写
          # 如果你想使用北京时间应为:CURRENT_TIME="Sat Jun 07 14:29:29 CST 2025"
          # CURRENT_TIME=$(date -u +"%a %b %d %H:%M:%S UTC %Y")
          CURRENT_TIME="Sun Apr 20 04:20:00 UTC 2025"

          echo "CURRENT_TIME=$CURRENT_TIME"
          perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \\| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_TIME\"}" ./common/scripts/mkcompile_h

          # Apply specific Makefile modification for kernel versions 6.1 and 6.6 only
          if [ "${{ inputs.kernel_version }}" = "6.1" ] || [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            sed -i -e "s|\$(preempt-flag-y) \"\$(build-timestamp)\"|\$(preempt-flag-y) \"$CURRENT_TIME\"|" ./common/init/Makefile
          fi

          if [ -f "build/build.sh" ]; then
            sed -i 's/-dirty//' ./common/scripts/setlocalversion
          else
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./common/BUILD.bazel
            rm -rf ./common/android/abi_gki_protected_exports_*
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
            # sed -E -i '/^CONFIG_LOCALVERSION=/ s/(.*)"$/\1"/' ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: Build with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: timeout
          command: |
            set -e
            set -x
            cd "$CONFIG"
            # 替换 BUILD_SYSTEM_DLKM=1 为 BUILD_SYSTEM_DLKM=0
            sed -i 's/BUILD_SYSTEM_DLKM=1/BUILD_SYSTEM_DLKM=0/' common/build.config.gki.aarch64

            # 删除 MODULES_ORDER=android/gki_aarch64_modules 行
            sed -i '/MODULES_ORDER=android\/gki_aarch64_modules/d' common/build.config.gki.aarch64

            sed -i '/KMI_SYMBOL_LIST_STRICT_MODE/d' common/build.config.gki.aarch64

            echo "Building the kernel..."
            if [ -f "build/build.sh" ]; then
              LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang" || exit 1
            else
              tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
            fi
            ccache --show-stats

      - name: 修补 Image 文件 安卓12和安卓13(仅限sukisu)
        if: ${{ inputs.use_kpm && (inputs.android_version == 'android12' || inputs.android_version == 'android13') }}
        run: |
          if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
            echo "Patching Image file..."
            cd "$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
            chmod 777 patch
            ./patch
            rm -rf Image
            mv oImage Image
            cd ../../../..
          fi

      - name: 修补 Image 文件 安卓14和安卓15(仅限sukisu)
        if: ${{ inputs.use_kpm && (inputs.android_version == 'android14' || inputs.android_version == 'android15') }}
        run: |
          if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
            echo "Patching Image file..."
            cd "$CONFIG/bazel-bin/common/kernel_aarch64/"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
            chmod 777 patch
            ./patch
            rm -rf Image
            mv oImage Image
            cd ../../..
          fi

      - name: 创建Bootimgs文件夹并复制镜像
        if: ${{ inputs.android_version == 'android12' || inputs.android_version == 'android13' }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./bootimgs
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image ./
          cp ./$CONFIG/out/${{ inputs.android_version }}-${{ inputs.kernel_version }}/dist/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: 创建Bootimgs文件夹并复制镜像
        if: ${{ inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          mkdir bootimgs

          echo "Creating bootimgs folder and copying images..."
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./bootimgs
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image.lz4 ./

          # Create gzip of the Image file
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: 创建不同格式的ZIP文件
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3

          # Create and upload zip for each format
          ZIP_NAME="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image

          ZIP_NAME="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3-lz4.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.lz4 ./Image.lz4
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.lz4

          ZIP_NAME="${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-AnyKernel3-gz.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image.gz ./Image.gz
          zip -r "../$ZIP_NAME" ./*
          rm ./Image.gz

      - name: 运行boot镜像 ${{ inputs.android_version }} 编译脚本
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          echo "更改为配置目录: $CONFIG..."
          cd bootimgs

          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip

          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)

          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi

          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip

          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"

          echo "Running unpack_bootimg.py..."
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"

          echo "Building Image.gz"
          gzip -n -k -f -9 ./Image > ./Image.gz

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img

      - name: 运行boot镜像 ${{ inputs.android_version }} 编译脚本
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          cd bootimgs

          echo "Building Image.gz"
          gzip -n -k -f -9 ./Image > ./Image.gz

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ inputs.sub_level }}-${{ inputs.os_patch_level }}-boot-lz4.img

      - name: 上传编译资产 (完整包)
        if: ${{ !inputs.only_ak3 }}
        uses: actions/upload-artifact@v4
        with:
          name: SukiSU_kernel-${{ env.CONFIG }}
          path: |
            *AnyKernel3.zip
            *.img

      - name: 上传编译资产 (仅 AK3)
        if: ${{ inputs.only_ak3 }}
        uses: actions/upload-artifact@v4
        with:
          name: SukiSU_kernel-${{ env.CONFIG }}
          path: |
            *AnyKernel3.zip
